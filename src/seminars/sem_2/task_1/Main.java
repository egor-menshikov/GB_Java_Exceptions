package seminars.sem_2.task_1;

//üìî –ó–∞–ø–∏—à–∏—Ç–µ –≤ —Ñ–∞–π–ª —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏:
//–ê–Ω–Ω–∞=4
//–ï–ª–µ–Ω–∞=5
//–ú–∞—Ä–∏–Ω–∞=6
//–í–ª–∞–¥–∏–º–∏—Ä=?
//–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω=?
//–ò–≤–∞–Ω=4
//–†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤
//(–ª–∏–±–æ HashMap, –µ—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç—ã —Å –Ω–∏–º –∑–Ω–∞–∫–æ–º—ã). –í –æ—Ç–¥–µ–ª—å–Ω–æ–º –º–µ—Ç–æ–¥–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–π—Ç–∏ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö,
//–µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ ?, –∑–∞–º–µ–Ω–∏—Ç—å –µ–≥–æ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —á–∏—Å–ª–æ.–ï—Å–ª–∏ –Ω–∞ –∫–∞–∫–æ–º-—Ç–æ –º–µ—Å—Ç–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Å–∏–º–≤–æ–ª,
//–æ—Ç–ª–∏—á–Ω—ã–π –æ—Ç —á–∏—Å–ª–∞ –∏–ª–∏ ?, –±—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.–ó–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–æ—Ç –∂–µ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã–µ —Å –∑–∞–º–µ–Ω–µ–Ω–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ ?.

import java.io.*;

import java.util.ArrayList;
import java.util.List;


public class Main {

    public static String PATH = "C:\\Study\\Java\\GB_Java_Exceptions\\src\\seminars\\sem_2\\task_1\\names.txt";

    public static void main(String[] args) {
        List<String[]> listNames = readToList(PATH);
        replaceQ(listNames);
        writeToFile(listNames);
    }

    public static List<String[]> readToList(String file) {
        List<String[]> result = new ArrayList<>();
        try {
            String line = "";
            BufferedReader br = new BufferedReader(new FileReader(file));
            while ((line = br.readLine()) != null) {
                String[] tempLine = line.split("=");
                if (!isNum(tempLine[1]) && !tempLine[1].equals("?")) {
                    throw new RuntimeException("–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ '=':" + tempLine[1]);
                }
                result.add(tempLine);
            }
        } catch (IOException e) {
            System.out.println(e.getMessage());
            ;
        }
        return result;
    }

    public static boolean isNum(String text) {
        try {
            Integer.parseInt(text);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    public static void replaceQ(List<String[]> list) {
        for (String[] string :
                list) {
            if (string[1].equals("?"))
                string[1] = String.valueOf(string[0].length());
        }
    }

    public static void writeToFile(List<String[]> list) {
        try {
            BufferedWriter bw = new BufferedWriter(new FileWriter(PATH));
            for (String[] item :
                    list) {
                bw.write(item[0] + "=" + item[1]);
                bw.newLine();
            }
            bw.close();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
}
